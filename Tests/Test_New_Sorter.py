import unittest
from Program.New_Sorter import DataInput


class TestIntegration(unittest.TestCase):
    """Тестирование взаимодействия модулей программы сортировки"""

    def test_integration_empty_input_condition(self):
        """Тестирование взаимодействия функций программы сортировки, если введена корректная строка с символами,
         подлежащими сортировке, но пустая строка вместо последовательности для упорядочивания.
        Ожидаемый результат:
            Ошибка: "Неверный формат сортировки!" """
        x = DataInput()
        y = x.char_count('ЗКЗЗСЗКЗСЗ')
        self.assertRaises(ValueError, x.sort_condition, y, '')

    def test_integration_norm(self):
        """Тестирование взаимодействия модулей программы сортировки, если введена корректная строка с символами,
         подлежащими сортировке и корректная последовательность для упорядочивания.
        Ожидаемый результат: Введённая строка упорядочена в соответствии с введённым порядком сортировки"""
        x = DataInput()
        res = x.sort_condition(x.char_count('ЗЗЗСССККК'), 'КЗС')
        self.assertEqual(res, ['\x1b[2;31;49m К\x1b[2;31;49m К\x1b[2;31;49m К',
                               '\x1b[2;32;49m З\x1b[2;32;49m З\x1b[2;32;49m З',
                               '\x1b[2;34;49m С\x1b[2;34;49m С\x1b[2;34;49m С'])


class TestCharCount(unittest.TestCase):
    """Тестирование функции подсчёта количества букв КЗС"""

    def test_char_count_number_with_KZS(self):
        """Тестирование функции подсчёта количества букв КЗС, если введена строка из символов К, З или С вперемешку
         с цифрами.
        Ожидаемый результат: Будет подсчитано количество введённых символов"""
        x = DataInput()
        res = x.char_count('З123СЗКЗЗС321ЗССЗКЗС99990000')
        self.assertEqual(res, [5, 2, 7])

    def test_char_count_split_space_KZS(self):
        """Тестирование функции подсчёта количества букв КЗС, если введена строка из символов К, З или С разделёнными
         одним пробелом или более.
        Ожидаемый результат: Будет подсчитано количество введённых символов"""
        x = DataInput()
        res = x.char_count('З С        З К З    З   С З   З К')
        self.assertEqual(res, [2, 2, 6])

    def test_char_count_many_of_KZS(self):
        """Тестирование функции подсчёта количества букв КЗС, если введена строка из единственного символа К, З или С.
        Ожидаемый результат: Будет подсчитано количество введённого символа"""
        x = DataInput()
        res = x.char_count('ЗСЗКЗЗСЗЗКЗЗЗЗЗЗЗЗЗЗЗКККККККККККСССССССССССССЗКЗСЗЗКЗСЗКЗЗСЗКЗСЗЗЗЗЗКККССС')
        self.assertEqual(res, [22, 20, 32])

    def test_char_count_only_one_of_KZS(self):
        """Тестирование функции подсчёта количества букв КЗС, если введена строка из единственного символа К, З или С.
        Ожидаемый результат: Будет подсчитано количество введённого символа"""
        x = DataInput()
        res = x.char_count('З')
        self.assertEqual(res, [0, 0, 1])

    def test_char_count_empty_input(self):
        """Тестирование функции на ошибку, если пользователь не ввёл символы для сортировки.
        Ожидаемый результат:
            Ошибка: "Введена пустая строка или введённые данные не содержат элементов для сортировки!" """
        x = DataInput()
        self.assertRaises(ValueError, x.char_count, '')

    def test_char_count_only_KZS(self):
        """Тестирование функции подсчёта количества букв КЗС.
        Ожидаемый результат: количество букв будет подсчитано и занесено в массив с тремя значениями"""
        x = DataInput()
        res = x.char_count('ЗЗЗСССККК')
        self.assertEqual(res, [3, 3, 3])

    def test_char_count_random_with_KZS(self):
        """Тестирование функции подсчёта количества букв КЗС, если в строке есть посторонние символы и пробелы.
        Ожидаемый результат: для сортировки будут приняты только символы К, З и С"""
        x = DataInput()
        res = x.char_count('ЗЗЗССС;%:  ?*(ККК')
        self.assertEqual(res, [3, 3, 3])


class TestSortCondition(unittest.TestCase):
    """Тестирование функции сортировки символов КЗС в указанном пользователем порядке"""

    def test_sort_ident_input_condition(self):
        """Тестирование функции сортировки, если в поле "порядка сортировки" введены повторяющиеся символы.
        Ожидаемый результат: будет учитываться только один из повторяющихся символов"""
        x = DataInput()
        res = x.sort_condition([3, 3, 3], 'ЗЗЗЗЗ')
        self.assertEqual(res, ['\x1b[2;32;49m З\x1b[2;32;49m З\x1b[2;32;49m З'])

    def test_sort_K_S_input_condition(self):
        """Тестирование функции сортировки, если пользователь ввёл 2 символа для сортировки.
        Ожидаемый результат: Вывод строки, состоящей из указанных символов """
        x = DataInput()
        res = x.sort_condition([3, 3, 3], 'КС')
        self.assertEqual(res, ['\x1b[2;31;49m К\x1b[2;31;49m К\x1b[2;31;49m К',
                               '\x1b[2;34;49m С\x1b[2;34;49m С\x1b[2;34;49m С'])

    def test_sort_only_K_input_condition(self):
        """Тестирование функции сортировки, если пользователь ввёл только 1 символ в виде порядка сортировки.
        Ожидаемый результат: Вывод строки, состоящей из указанного символа """
        x = DataInput()
        res = x.sort_condition([3, 3, 3], 'К')
        self.assertEqual(res, ['\x1b[2;31;49m К\x1b[2;31;49m К\x1b[2;31;49m К'])

    def test_sort_spec_symbols_and_KZS_condition(self):
        """Тестирование функции на ошибку, если пользователь ввёл спецсимволы и символы КЗС в виде порядка сортировки.
        Ожидаемый результат: Будут отсортированы только символы " """
        x = DataInput()
        res = x.sort_condition([3, 3, 3], ';%:?К%;:З;%:?*(С;%:?*')
        self.assertEqual(res, ['\x1b[2;31;49m К\x1b[2;31;49m К\x1b[2;31;49m К',
                               '\x1b[2;32;49m З\x1b[2;32;49m З\x1b[2;32;49m З',
                               '\x1b[2;34;49m С\x1b[2;34;49m С\x1b[2;34;49m С'])

    def test_sort_space_condition(self):
        """Тестирование функции на ошибку, если пользователь ввёл пробел в виде порядка сортировки.
        Ожидаемый результат:
            Ошибка "Неверный формат сортировки!" """
        x = DataInput()
        self.assertRaises(ValueError, x.sort_condition, [3, 3, 3], '          ')

    def test_sort_numbers_condition(self):
        """Тестирование функции на ошибку, если пользователь ввёл цифры в виде порядка сортировки.
        Ожидаемый результат:
            Ошибка "Неверный формат сортировки!" """
        x = DataInput()
        self.assertRaises(ValueError, x.sort_condition, [3, 3, 3], '1234567890')

    def test_sort_spec_symbols_condition(self):
        """Тестирование функции на ошибку, если пользователь ввёл спецсимволы в виде порядка сортировки.
        Ожидаемый результат:
            Ошибка "Неверный формат сортировки!" """
        x = DataInput()
        self.assertRaises(ValueError, x.sort_condition, [3, 3, 3], '#$%^&*(')

    def test_sort_empty_input_condition(self):
        """Тестирование функции на ошибку, если пользователь не ввёл символы порядка сортировки.
        Ожидаемый результат:
            Ошибка "Неверный формат сортировки!" """
        x = DataInput()
        self.assertRaises(ValueError, x.sort_condition, [3, 3, 3], '')

    def test_sort_KZS(self):
        """Тестирование функции сортировки символов КЗС в указанном порядке.
        Ожидаемый результат: Вывод списка отсортированных символов, соответствующих указанному порядку сортировки"""
        x = DataInput()
        res = x.sort_condition([3, 3, 3], 'СЗК')
        self.assertEqual(res, ['\x1b[2;34;49m С\x1b[2;34;49m С\x1b[2;34;49m С',
                               '\x1b[2;32;49m З\x1b[2;32;49m З\x1b[2;32;49m З',
                               '\x1b[2;31;49m К\x1b[2;31;49m К\x1b[2;31;49m К'])


if __name__ == '__main__':
    unittest.main()
